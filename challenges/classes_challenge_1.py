# -*- coding: utf-8 -*-
"""Copy of classes_1_desafio.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1F3jZQkVpSTLynVj8IGCqiTckw-zCP-2Q

## Desafio Classes

O projeto de validação bancária sofreu uma mudança no seu escopo, e agora o serviço precisa prever tanto os bancos homologados pela cip quanto outros bancos também.

O antigo desenvolvendor do projeto está de férias e precisamos dar continuidade. Há uma parte da solução feita por ele, então, a partir disso, considere:

- O código feito por ele poderá ser utilizado, mas NÃO poderá ser alterado (não sabemos os impactos disso!);

- O PO nos enviou dois arquivos CSV, um contém todos os bancos disponíveis, e outro com os bancos homologados pela CIP;

- O que precisamos é de um novo arquivo CSV, contendo o cabeçalho dos campos (normalizados POR FAVOR), e todos os dados possíveis dos dois arquivos, adicionando a coluna "CIP" que deverá conter o valor 'S' ou 'N', caso sejam ou não homologados respectivamente; 

- O separador dos campos no CSV deverá ser o "ponto-e-vírgula";

- O código do banco deverá ter 3 dígitos;

- O código ISPB deverá ter 8 dígitos;

- O CNPJ tem 14 dígitos (e deve estar sem formatação);

- O nome do banco normalizado;

- Considere deixar o CSV gerado com a maior quantidade de dados possível.

- Considere fazer o código da forma mais enxuta e legível possível, afinal não seremos os únicos a mexer nele;

- Curiosidade: Uma solução razoável, possui menos de 45 linhas, além das já escritas.


### Arquivos
- https://drive.google.com/file/d/1Ljru927f-G75dyo3C_gBZUgOXBOa-i2H/view?usp=sharing

- https://drive.google.com/file/d/15f1uaXkyMBnTav7juqdXK2T9igLhFbpo/view?usp=sharing


### Referência

- https://docs.python.org/3/library/csv.html
"""

import csv


class Reader:
    __state_row = 0

    def __init__(self, file_path, **kwargs):
        self.file_path = file_path
        self.kwargs = kwargs

    def __open_file(self):
        return open(self.file_path, 'r')

    @property
    def row(self):
        with self.__open_file() as f:
            reader = csv.DictReader(f, **self.kwargs)
            current_row = 0

            for row in reader:
                
                if current_row == self.__state_row:
                    self.__state_row += 1
                    yield dict(row)
                
                current_row += 1
            
            f.seek(0);
            self.__state_row = 0
            return None